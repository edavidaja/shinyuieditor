.ResizableGrid {
  --grid-gap: 5px;

  --grid-pad: var(--pad, 5px);

  /* How much does the handle expand to make it easier to grab? */
  --sizer-expansion-amnt: 1.3;
  --sizer-margin-offset: calc(-1 * var(--grid-gap));
  --sizer-thickness: 2px;
  --sizer-length: calc(100% + 2 * var(--grid-pad));
  --sizer-main-axis-offset: calc(-1 * var(--grid-pad));
  --sizer-off-axis-offset: calc(50% - var(--sizer-thickness) / 2);

  height: 100%;
  width: 100%;
  min-height: 80px;
  min-width: 400px;
  display: grid;
  padding: var(--grid-pad);
  gap: var(--grid-gap);
  position: relative;
  /* Setup z-index stack so we can ensure our tract controls sit below the items  */
  isolation: isolate;
}

.ResizableGrid > * {
  /* By putting explicit min values on sizes of the items we stop them from
    blowing out the grid by staying too big. See
    https://css-tricks.com/preventing-a-grid-blowout/ for more details */
  min-width: 0;
  min-height: 0;
}

div.columnSizer,
div.rowSizer {
  /* Make sure tract controls don't overlap the items */
  z-index: -1;
  background-color: transparent;
  opacity: 1;
  position: relative;
  /*
     Transformation back to default size is nice and slow to make it less
     confusing when the mouse slips slighlty off the grab handle and then when
     returning to the same place it is nowhere to be found.
    */
  transition: transform 1s 0.5s;
}

.columnSizer {
  grid-row: 1/-1;
  width: var(--grid-gap);
  margin-left: var(--sizer-margin-offset);
  height: var(--sizer-length);
  cursor: ew-resize;
}

.rowSizer {
  grid-column: 1/-1;
  height: var(--grid-gap);
  margin-top: var(--sizer-margin-offset);
  width: var(--sizer-length);
  cursor: ns-resize;
}

div.columnSizer::after,
div.rowSizer::after {
  content: "";
  position: absolute;
  background-color: var(--rstudio-blue);
}

div.columnSizer::after {
  height: 100%;
  width: var(--sizer-thickness);
  left: var(--sizer-off-axis-offset);
  top: var(--sizer-main-axis-offset);
}

div.rowSizer::after {
  width: 100%;
  height: var(--sizer-thickness);
  top: var(--sizer-off-axis-offset);
  left: var(--sizer-main-axis-offset);
}

.columnSizer:hover,
.rowSizer:hover {
  /* Make the transition to larger instant */
  transition: transform 0s;
}
.columnSizer:hover {
  transform: scaleX(var(--sizer-expansion-amnt));
}
.rowSizer:hover {
  transform: scaleY(var(--sizer-expansion-amnt));
}

div#size-detection-cell {
  width: 100%;
  height: 100%;

  /* One of these will get over-ridden by inline css */
  grid-row: 1/-1;
  grid-column: 1/-1;
}

.tractInfoDisplay {
  background-color: var(--rstudio-white);
  border-radius: var(--corner-radius);
  box-shadow: 1px 1px 5px var(--rstudio-grey);
  height: fit-content;
  width: fit-content;
  padding-block: 1px;
  padding-inline: 5px;
  z-index: 1;
  margin: 3px;
}

.tractInfoDisplay[data-drag-dir="rows"] {
  grid-column: 1;
  grid-row: var(--tract-index);
  align-self: center;
}
.tractInfoDisplay[data-drag-dir="columns"] {
  grid-row: 1;
  grid-column: var(--tract-index);
  justify-self: center;
}

.areaControls {
  /* outline: 2px solid burlywood; */
  position: relative;
}

.resizeOverlay {
  display: none;
}

.resizeOverlay[data-being-resized="true"] {
  display: block;
  position: absolute;
  inset: 0;
  background-color: grey;
  opacity: 0.3;
}

.areaControls[data-being-resized="true"] {
  outline: 4px solid red;
  display: block;
  position: absolute;
}

.upperLeftSizer,
.lowerRightSizer {
  --size: 10px;
  --offset: calc(var(--size) / -2);
  position: absolute;
  width: var(--size);
  height: var(--size);
  border-radius: var(--corner-radius);
  outline: 1px solid var(--grey);
}
.upperLeftSizer:hover,
.lowerRightSizer:hover {
  transform: scale(1.5);
  background-color: var(--rstudio-white);
}

.upperLeftSizer {
  top: var(--offset);
  left: var(--offset);
  cursor: nw-resize;
}
.lowerRightSizer {
  bottom: var(--offset);
  right: var(--offset);
  cursor: se-resize;
}
